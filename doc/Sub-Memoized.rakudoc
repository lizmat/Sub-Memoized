=begin pod

=head1 NAME

Sub::Memoized - trait for memoizing calls to subroutines

=head1 SYNOPSIS

=begin code :lang<raku>

use Sub::Memoized;

sub a($a,$b) is memoized {
  # do some expensive calculation
}

sub b($a, $b) is memoized( my %cache ) {
  # do some expensive calculation with direct access to cache
}

use Hash::LRU;
sub c($a, $b) is memoized( my %cache is LRU( elements => 2048 ) ) {
  # do some expensive calculation, keep last 2048 results returned
}

sub d(Int:D $a, Int:D $b) is memoized({ "$_[0],$_[1]" }) {
  # do some expensive calculation with cheaper key maker
}

sub e(Str:D $a, Str:D $b) is memoized(my %cache, *.list.sort.join("'")) {
  # do some expensive calculation with direct access to cache
  # without making the order of the arguments matter
}

=end code

=head1 DESCRIPTION

The C<Sub::Memoized> distribution provides a C<is memoized> trait on
C<Sub>routines as an easy way to cache calculations made by that
subroutine (assuming a given set of input parameters will always produce
the same result).

Optionally, one can specify an C<Associative> that will serve as the cache.
This allows later access to the generated results.  Or you can specify a
specially crafted hash, such as one made with
L<C<Hash::LRU>|https://raku.land/zef:lizmat/Hash::LRU>.

=head1 IDENTIFICATION KEY

By default, the identification key used to lookup values in the cache,
is built from the C<.WHICH> values of B<all> the arguments passed to the
subroutine.  This may not always be the fastest or best way to do this.

Therefore one can specify a C<Callable> that will be called to generate
the identification key, bypassing the default key maker. This can e.g. be
used to create a more efficient key generator, or can be used to create
a key generator with special properties, e.g. making the arguments
commutative.

This C<Callable> will be given a C<Capture> and is expected to return
something that can be used as a key in the C<Associative> that has been
(implicitely) specified (usually a string).

=head1 CAVEAT

Please note that if you do B<not> use a store that is thread-safe, the
memoization will B<not> be thread-safe either.  This is the default.

=head1 SEE ALSO

The experimental L<C<is cached>|https://docs.raku.org/routine/is%20cached>
trait provides similar but more limited functionality.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Sub-Memoized . Comments and
Pull Requests are welcome.

If you like this module, or what I'm doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2018, 2020, 2021, 2024, 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
